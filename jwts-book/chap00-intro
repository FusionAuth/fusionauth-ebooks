# What are JWTs

First things first. JSON Web Tokens, or JWTs, are pronounced 'jot', not J-W-T. You're welcome!

JWTs encapsulate arbitrary JSON in a standardized way, and are useful to communicate between different parts of a software system.

They are an IETF standard. The main RFC is 7519, but there are others as well. RFC 7515, RFC 7516, RFC 7517, RFC 7518 and RFC 7520 all concern this technology in one way or another. The group of standards is called JOSE (for Javascript Object Signing and Encryption).

There are two kinds of JWTs: signed and encrypted. 

Signed JWTs allow you to cryptographically verify the integrity of the JWT. That means you can be assured the contents are unchanged from when the signer created it. However, signed JWTs do not protect the data carried from being seen; anyone who possesses a JWT can see its content. You don't want to put anything in a JWT that should be a secret or that might leak information.

Encrypted JWTs, on the other hand, have a payload that cannot be read by those who do not possess the decryption key. If you have a payload that must be secret and both the creator and recipient of the JWT support it, encrypted JWTs are a good solution.

In general, signed JWTs are far more common. Unless otherwise noted, if this book uses the term JWT, it refers to a signed JWT.

JWTs are often used as stateless, portable tokens of identity. This usage will be the focus of this book, but what does that actually mean?

* They are stateless because the integrity of the information can be determined without contacting any remote service or server. The aforementioned signature allows a consumer of a JWT to verify the integrity without any network access.
* They are portable because, even though they contain characters such as `{` that are typically not acceptable in certain contexts, JWTs use base64 URL encoding. This encoding ensures that the contents are safe for HTTP headers, cookies, and form parameters.
* Because of the flexibility of the JSON format, JWTs can encapsulate identity information, such as roles and user identifiers.

The combination of these attributes mean that JWTs are great for transporting identity information to different services. One service may authenticate the user and create a JWT for the client, and then other services, which offer different functionality and data depending on who the user is, can consume that JWT. This works especially well for APIs and microservices, which have minimal information about the user in their datastore. This is why many auth servers, also known as identity providers, issue JWTs.

You can sign a JWT with either a symmetric or asymmetric algorithm. Using a symmetric algorithm will be faster, but has significant security and operational ramifications. This is not unique to JWTs, because a symmetric algorithm like HS256 requires a shared secret. Therefore, when using a symmetric algorithm, any consumer of a JWT can also create JWTs indistinguishable from those created by an identity provider. Therefore, asymmetric solutions are recommended, even though they are slower. If performance is critical, make sure you benchmark your system to understand how signing algorithm choice affects both creation and consumption of JWTs.

Not all bearer tokens are JWTs and not all JWTs are bearer tokens, but the use case is common enough that it is worth mentioning. A bearer token is like a car key. If I have a car key, that gives me access to the car. The key doesn't care if I'm the owner, a friend or a thief. 

In the same way, bearer tokens offer access to protected resources no matter who is presenting them. That means that you need to protect JWTs used in this way by using TLS for transport and by storing them safely in a location not accessible to other applications or rogue code.

If your use case is such that the risks of bearer tokens are unacceptable, there are a few options that cryptographically bind a token to a client. JWTs used in this way are not bearer tokens. While I won't be covering these solutions, both [MTLS](https://datatracker.ietf.org/doc/html/rfc8705) and [DPoP](https://datatracker.ietf.org/doc/html/rfc9449) may meet your needs.

As mentioned above, JWTs are produced by many identity providers. They are also widely supported elsewhere, having many articles, open source libraries and implementations available. I have yet to run into a major language that didn't have at least one library for creating and parsing JWTs. And, because JWTs depend on cryptographic operations and are often used as temporary credentials, using a well known, well vetted open source library to interact with JWTs is a good idea.

In the rest of this book, we'll cover different aspects of JSON Web Tokens and systems that use them.
